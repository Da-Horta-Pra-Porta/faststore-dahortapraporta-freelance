// we need these to avoid typescript errors when using modules auto-generated by faststore
declare module "src/sdk/search/formatSearchPath" {
  export function formatSearchPath({ term, sort }: FormatSearchPath): string
}
declare module "src/sdk/search/useSearchHistory" {
  export default function useSearchHistory(maxHistorySize?: number): {
    searchHistory: {
      term: string
      path: string
    }[]
    addToSearchHistory: (newHistory: { term: string; path: string }) => void
    clearSearchHistory: () => void
  }
}
declare module "src/sdk/search/useSuggestions" {
  export default function useSuggestions(term: string): {
    data: Query
    error: any
  }
}
declare module "src/sdk/ui/useOnClickOutside" {
  export default function useOnClickOutside<
    T extends HTMLElement = HTMLElement
  >(ref: RefObject<T>, handler: Handler): void
}
declare module "src/sdk/search/useTopSearch" {
  export default function useTopSearch(): {
    data: Query
    error: any
  }
}
declare module "src/sdk/product/usePageProductsQuery"
declare module "src/components/skeletons/ProductGridSkeleton"
declare module "src/sdk/search/useDelayedPagination" {
  export const useDelayedPagination: (totalCount: number) => {
    next:
      | false
      | {
          cursor: number
          link: string
        }
    prev:
      | false
      | {
          cursor: number
          link: string
        }
  }
}
declare module "src/sdk/product/useProductsPrefetch" {
  export const useProductsPrefetch: (page: number | null) => void
}
declare module "src/sdk/search/useDelayedFacets" {
  export const useDelayedFacets: (
    data?: ClientProductGalleryQueryQuery
  ) => Filter_FacetsFragment[]
}
declare module "src/sdk/product/useProductLink"
declare module "src/sdk/newsletter/useNewsletter" {
  export const useNewsletter: () => {
    subscribeUser: (
      queryVariables: Exact<{
        data: IPersonNewsletter
      }>
    ) => Promise<void>
    data: Mutation
    error: any
    loading: boolean
  }
}
declare module "src/sdk/session" {
  import { Session } from "@faststore/sdk";

  export const useSession: ({
    filter,
  }?: SessionOptions) => Session & { channel: string; isValidating: boolean }
  export const validateSession: (session: Session) => Promise<Session>
  export const sessionStore: {
    set: (val: Session) => void
    read: () => Session
    readInitial: () => Session
    subscribe: (sub: Subscriber<Session>) => () => void
  }
}

declare module "src/sdk/auth" {
  import { SessionPerson as Person } from "@faststore/sdk";

  export const useAuth: () => {
    isAutenticated: Person
    profile: Person
    channel: {
      salesChannel: number
      regionId: string
      hasOnlyDefaultSalesChannel?: boolean
    }
    isValidating: boolean
  }
}

declare module "src/sdk/cart/useCartToggleButton" {
  export const useCartToggleButton: () => {
    onClick: () => void
    "data-testid": string
    "data-items": number
  }
}

declare module "src/sdk/cart/useCheckoutButton" {
  export const useCheckoutButton: () => {
    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void
    disabled: boolean
    "data-testid": string
  }
}

declare module "src/sdk/cart" {
  import { CartItem as BaseCartItem } from "@faststore/sdk";

  export type CartItem = BaseCartItem & {
    quantity: number
    price: number
    priceWithTaxes: number
    listPrice: number
    listPriceWithTaxes: number
    seller: { identifier: string }
    itemOffered: {
      sku: string
      name: string
      unitMultiplier: number | null
      gtin: string
      image: Array<{ url: string; alternateName: string }>
      brand: { name: string }
      isVariantOf: {
        productGroupID: string
        name: string
        skuVariants: {
          activeVariations: any | null
          slugsMap: any | null
          availableVariations: any | null
        } | null
      }
      additionalProperty: Array<{
        propertyID: string
        name: string
        value: any
        valueReference: any
      }>
    }
  }

  export const cartStore: {
    getItem: (id: string) => Item | undefined
    addItem: (item: Item) => void
    updateItemQuantity: (id: string, quantity: number) => void
    removeItem: (id: string) => void
    emptyCart: () => void
    inCart: (id: string) => boolean
    isEmpty: () => boolean
    set: (val: C) => void
    read: () => C
    readInitial: () => C
    subscribe: (sub: (value: C) => void | (() => void)) => () => void
  }

  export const useCart: ({
    useUnitMultiplier,
  }?: {
    useUnitMultiplier: boolean
  }) => {
    isValidating: boolean
    id: string
    totalItems: number
    total: number
    subTotal: number
    totalWithTaxes: number
    subTotalWithTaxes: number
    messages: CartMessageFragment[]
    gifts: CartItem[]
    items: CartItem[]
    totalUniqueItems: number
  }
}

declare module "src/sdk/cart/useRemoveButton" {
  import { CartItem } from "@faststore/sdk";

  export const useRemoveButton: (item: CartItem | null) => {
    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void
    "data-testid": string
    "data-sku": string
  }
}


declare module ".faststore/@generated/graphql" {
  export type ClientManyProductsQueryQuery = {
    search: {
      products: {
        pageInfo: { totalCount: number }
        edges: Array<{
          node: {
            unitMultiplier: number | null
            slug: string
            sku: string
            name: string
            gtin: string
            id: string
            specifications: Array<{
              name: string
              value: string
            } | null> | null
            clusterHighlights: Array<{
              name: string
              id: string
            } | null> | null
            isVariantOf: {
              productGroupID: string
              name: string
              hasVariant: Array<{
                slug: string
                name: string
                productID: string
                description: string
                sku: string
                gtin: string
                releaseDate: string
                unitMultiplier: number | null
              }>
              skuVariants: {
                allVariantsByName: any | null
                slugsMap: any | null
                availableVariations: any | null
                activeVariations: any | null
              } | null
            }
            offers: {
              highPrice: number
              lowPrice: number
              lowPriceWithTaxes: number
              offerCount: number
              priceCurrency: string
              offers: Array<{
                listPrice: number
                listPriceWithTaxes: number
                sellingPrice: number
                priceCurrency: string
                price: number
                priceWithTaxes: number
                priceValidUntil: string
                itemCondition: string
                availability: string
                quantity: number
                seller: { identifier: string }
              }>
            }
            brand: { name: string; brandName: string }
            image: Array<{ url: string; alternateName: string }>
            additionalProperty: Array<{
              propertyID: string
              name: string
              value: any
              valueReference: any
            }>
            attachments: Array<{
              name: string
              id: number
            }>
          }
        }>
      }
    }
  }

  export type CartItemFragment = {
    quantity: number
    price: number
    priceWithTaxes: number
    listPrice: number
    listPriceWithTaxes: number
    seller: { identifier: string }
    itemOffered: {
      sku: string
      name: string
      unitMultiplier: number | null
      gtin: string
      image: Array<{ url: string; alternateName: string }>
      brand: { name: string }
      isVariantOf: {
        productGroupID: string
        name: string
        skuVariants: {
          activeVariations: any | null
          slugsMap: any | null
          availableVariations: any | null
        } | null
      }
      additionalProperty: Array<{
        propertyID: string
        name: string
        value: any
        valueReference: any
      }>
    }
  }

  export type ProductSummary_ProductFragment = {
    slug: string
    sku: string
    name: string
    gtin: string
    id: string
    brand: { name: string; brandName: string }
    isVariantOf: { productGroupID: string; name: string }
    image: Array<{ url: string; alternateName: string }>
    offers: {
      lowPrice: number
      lowPriceWithTaxes: number
      offers: Array<{
        availability: string
        price: number
        listPrice: number
        listPriceWithTaxes: number
        quantity: number
        seller: { identifier: string }
      }>
    }
    additionalProperty: Array<{
      propertyID: string
      name: string
      value: any
      valueReference: any
    }>
  }

  export interface MasterDataResponse {
    Id: string
    Href: string
  }

  export type IPersonNewsletter = {
    email: string
    name: string
  }

  export type PersonNewsletter = {
    id: string
  }

  export type MutationSubscribeToNewsletterArgs = {
    data: IPersonNewsletter
  }

  export type SubscribeToCustomNewsletterMutationVariables = Exact<{
    data: IPersonNewsletter
  }>

  export type SubscribeToCustomNewsletterMutation = {
    subscribeToCustomNewsletter: { id: string } | null
  }
}

declare module "src/sdk/shipping" {
  interface ShippingQueryData {
    items: Array<{
      id: string
      quantity: number
      seller: string
    }>
    postalCode: string
    country: string
  }

  export const getShippingSimulation: ({
    items,
    postalCode,
    country,
  }: ShippingQueryData) => Promise<{
    shipping: {
      logisticsInfo: Array<{
        slas: Array<{
          carrier: string | null
          price: number | null
          shippingEstimate: string | null
          localizedEstimates: string | null
          availableDeliveryWindows: Array<{
            startDateUtc: string | null
            endDateUtc: string | null
            price: number | null
            listPrice: number | null
          } | null> | null
        } | null> | null
      } | null> | null
      address: {
        city: string | null
        neighborhood: string | null
        state: string | null
      } | null
    } | null
  }>
}

declare module "src/sdk/graphql/request" {
  export const request: <Query = unknown, Variables = unknown>(
    operation: Operation,
    variables: Variables,
    options?: RequestOptions
  ) => Promise<Query>
}
